{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe55115a70e4ffdcf1b47aa9f9927f523ea4d0b58d493eb5e51f9d201bdd1d49d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1052231",
    "logsBloom": "0x
    "blockHash": "0xfa9b5a94cea4f4f00eadece8081aa9a43b11f5811700478137aa3cb8d0817c34",
    "transactionHash": "0xe55115a70e4ffdcf1b47aa9f9927f523ea4d0b58d493eb5e51f9d201bdd1d49d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1052231",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "1c368b2002c6a9b283bc8c2835aadb27",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Foo Bar\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\nimport \\\"./PriceConverter.sol\\\";\\r\\n\\r\\nerror FundMe__NotOwner();\\r\\n\\r\\n/**@title A sample Funding Contract\\r\\n * @author Foo Bar\\r\\n * @notice This contract is for creating a sample funding contract\\r\\n * @dev This implements price feeds as our library\\r\\n */\\r\\ncontract FundMe {\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\r\\n\\r\\n    address[] private s_funders;\\r\\n    mapping(address => uint256) private s_addressToAmountFunded;\\r\\n\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    AggregatorV3Interface private s_priceFeed;\\r\\n\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender;\\r\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    fallback() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\r\\n        if (msg.sender != i_owner) {\\r\\n            revert FundMe__NotOwner();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @notice Funds our contract based on the ETH/USD price\\r\\n    function fund() public payable {\\r\\n        require(\\r\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\r\\n            \\\"You need to spend more ETH!\\\"\\r\\n        );\\r\\n        s_funders.push(msg.sender);\\r\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < s_funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = s_funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwner {\\r\\n        address[] memory funders = s_funders;\\r\\n        for (\\r\\n            uint256 funderIndex = 0;\\r\\n            funderIndex < funders.length;\\r\\n            funderIndex++\\r\\n        ) {\\r\\n            address funder = funders[funderIndex];\\r\\n            s_addressToAmountFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        s_funders = new address[](0);\\r\\n\\r\\n        // call\\r\\n        (bool callSuccess, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(callSuccess, \\\"Call Failed\\\");\\r\\n    }\\r\\n\\r\\n    function getContractBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 index) public view returns (address) {\\r\\n        return s_funders[index];\\r\\n    }\\r\\n\\r\\n    function getAddressToAmountFunded(\\r\\n        address funder\\r\\n    ) public view returns (uint256) {\\r\\n        return s_addressToAmountFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return s_priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe07db58d8061ab637bdf4ebe12d82381227b4893d43f38fbe6837da923c91544\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethAmount * ethPrice) / 1e18;\\r\\n        return ethAmountInUsd;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x03794585aa8df79443b5f1a08b43764b6ac66e1af13f43a5345593f1af91fe13\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200132a3803806200132a833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111ab6200017f6000396000818161036d015281816105c4015261061401526111ab6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100ea5780636f9fb98a1461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ae3565b610322565b6040516100d79190610b29565b60405180910390f35b6100e861036b565b005b3480156100f657600080fd5b506100ff6105ab565b60405161010c9190610b29565b60405180910390f35b34801561012157600080fd5b5061012a6105b8565b6040516101379190610b29565b60405180910390f35b34801561014c57600080fd5b506101556105c0565b6040516101629190610b53565b60405180910390f35b34801561017757600080fd5b506101806105e8565b60405161018d9190610bcd565b60405180910390f35b61019e6101e7565b005b6101a8610612565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c14565b6108b6565b6040516101de9190610b53565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108fd90919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c9e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103199190610ced565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561049b57600080828154811061041557610414610d43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049390610d72565b9150506103f3565b50600067ffffffffffffffff8111156104b7576104b6610dbb565b5b6040519080825280602002602001820160405280156104e55781602001602082028036833780820191505090505b50600090805190602001906104fb9291906109d9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052290610e1b565b60006040518083038185875af1925050503d806000811461055f576040519150601f19603f3d011682016040523d82523d6000602084013e610564565b606091505b50509050806105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90610e7c565b60405180910390fd5b50565b6802b5e3af16b188000081565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610697576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d0575b5050505050905060005b81518110156107a557600082828151811061074257610741610d43565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079d90610d72565b915050610724565b50600067ffffffffffffffff8111156107c1576107c0610dbb565b5b6040519080825280602002602001820160405280156107ef5781602001602082028036833780820191505090505b50600090805190602001906108059291906109d9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161082c90610e1b565b60006040518083038185875af1925050503d8060008114610869576040519150601f19603f3d011682016040523d82523d6000602084013e61086e565b606091505b50509050806108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990610e7c565b60405180910390fd5b5050565b60008082815481106108cb576108ca610d43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090983610939565b90506000670de0b6b3a764000082866109229190610e9c565b61092c9190610f25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098257600080fd5b505afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190610fe3565b5050509150506402540be400816109d1919061105e565b915050919050565b828054828255906000526020600020908101928215610a52579160200282015b82811115610a515782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f9565b5b509050610a5f9190610a63565b5090565b5b80821115610a7c576000816000905550600101610a64565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab082610a85565b9050919050565b610ac081610aa5565b8114610acb57600080fd5b50565b600081359050610add81610ab7565b92915050565b600060208284031215610af957610af8610a80565b5b6000610b0784828501610ace565b91505092915050565b6000819050919050565b610b2381610b10565b82525050565b6000602082019050610b3e6000830184610b1a565b92915050565b610b4d81610aa5565b82525050565b6000602082019050610b686000830184610b44565b92915050565b6000819050919050565b6000610b93610b8e610b8984610a85565b610b6e565b610a85565b9050919050565b6000610ba582610b78565b9050919050565b6000610bb782610b9a565b9050919050565b610bc781610bac565b82525050565b6000602082019050610be26000830184610bbe565b92915050565b610bf181610b10565b8114610bfc57600080fd5b50565b600081359050610c0e81610be8565b92915050565b600060208284031215610c2a57610c29610a80565b5b6000610c3884828501610bff565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c88601b83610c41565b9150610c9382610c52565b602082019050919050565b60006020820190508181036000830152610cb781610c7b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf882610b10565b9150610d0383610b10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3857610d37610cbe565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7d82610b10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db057610daf610cbe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e05600083610dea565b9150610e1082610df5565b600082019050919050565b6000610e2682610df8565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e66600b83610c41565b9150610e7182610e30565b602082019050919050565b60006020820190508181036000830152610e9581610e59565b9050919050565b6000610ea782610b10565b9150610eb283610b10565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eeb57610eea610cbe565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3082610b10565b9150610f3b83610b10565b925082610f4b57610f4a610ef6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7581610f56565b8114610f8057600080fd5b50565b600081519050610f9281610f6c565b92915050565b6000819050919050565b610fab81610f98565b8114610fb657600080fd5b50565b600081519050610fc881610fa2565b92915050565b600081519050610fdd81610be8565b92915050565b600080600080600060a08688031215610fff57610ffe610a80565b5b600061100d88828901610f83565b955050602061101e88828901610fb9565b945050604061102f88828901610fce565b935050606061104088828901610fce565b925050608061105188828901610f83565b9150509295509295909350565b600061106982610f98565b915061107483610f98565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b3576110b2610cbe565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f0576110ef610cbe565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112d5761112c610cbe565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116a57611169610cbe565b5b82820290509291505056fea26469706673582212207ab1a1a009e3ed1a71f5dad702869165b92bc6da8027478640f165d094ad573964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780633ccfd60b146100e05780636b69a592146100ea5780636f9fb98a1461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610ae3565b610322565b6040516100d79190610b29565b60405180910390f35b6100e861036b565b005b3480156100f657600080fd5b506100ff6105ab565b60405161010c9190610b29565b60405180910390f35b34801561012157600080fd5b5061012a6105b8565b6040516101379190610b29565b60405180910390f35b34801561014c57600080fd5b506101556105c0565b6040516101629190610b53565b60405180910390f35b34801561017757600080fd5b506101806105e8565b60405161018d9190610bcd565b60405180910390f35b61019e6101e7565b005b6101a8610612565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c14565b6108b6565b6040516101de9190610b53565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108fd90919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610c9e565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103199190610ced565b92505081905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f0576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561049b57600080828154811061041557610414610d43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049390610d72565b9150506103f3565b50600067ffffffffffffffff8111156104b7576104b6610dbb565b5b6040519080825280602002602001820160405280156104e55781602001602082028036833780820191505090505b50600090805190602001906104fb9291906109d9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052290610e1b565b60006040518083038185875af1925050503d806000811461055f576040519150601f19603f3d011682016040523d82523d6000602084013e610564565b606091505b50509050806105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90610e7c565b60405180910390fd5b50565b6802b5e3af16b188000081565b600047905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610697576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561071a57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106d0575b5050505050905060005b81518110156107a557600082828151811061074257610741610d43565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061079d90610d72565b915050610724565b50600067ffffffffffffffff8111156107c1576107c0610dbb565b5b6040519080825280602002602001820160405280156107ef5781602001602082028036833780820191505090505b50600090805190602001906108059291906109d9565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161082c90610e1b565b60006040518083038185875af1925050503d8060008114610869576040519150601f19603f3d011682016040523d82523d6000602084013e61086e565b606091505b50509050806108b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a990610e7c565b60405180910390fd5b5050565b60008082815481106108cb576108ca610d43565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090983610939565b90506000670de0b6b3a764000082866109229190610e9c565b61092c9190610f25565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561098257600080fd5b505afa158015610996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ba9190610fe3565b5050509150506402540be400816109d1919061105e565b915050919050565b828054828255906000526020600020908101928215610a52579160200282015b82811115610a515782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f9565b5b509050610a5f9190610a63565b5090565b5b80821115610a7c576000816000905550600101610a64565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ab082610a85565b9050919050565b610ac081610aa5565b8114610acb57600080fd5b50565b600081359050610add81610ab7565b92915050565b600060208284031215610af957610af8610a80565b5b6000610b0784828501610ace565b91505092915050565b6000819050919050565b610b2381610b10565b82525050565b6000602082019050610b3e6000830184610b1a565b92915050565b610b4d81610aa5565b82525050565b6000602082019050610b686000830184610b44565b92915050565b6000819050919050565b6000610b93610b8e610b8984610a85565b610b6e565b610a85565b9050919050565b6000610ba582610b78565b9050919050565b6000610bb782610b9a565b9050919050565b610bc781610bac565b82525050565b6000602082019050610be26000830184610bbe565b92915050565b610bf181610b10565b8114610bfc57600080fd5b50565b600081359050610c0e81610be8565b92915050565b600060208284031215610c2a57610c29610a80565b5b6000610c3884828501610bff565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c88601b83610c41565b9150610c9382610c52565b602082019050919050565b60006020820190508181036000830152610cb781610c7b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf882610b10565b9150610d0383610b10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3857610d37610cbe565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7d82610b10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610db057610daf610cbe565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e05600083610dea565b9150610e1082610df5565b600082019050919050565b6000610e2682610df8565b9150819050919050565b7f43616c6c204661696c6564000000000000000000000000000000000000000000600082015250565b6000610e66600b83610c41565b9150610e7182610e30565b602082019050919050565b60006020820190508181036000830152610e9581610e59565b9050919050565b6000610ea782610b10565b9150610eb283610b10565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eeb57610eea610cbe565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f3082610b10565b9150610f3b83610b10565b925082610f4b57610f4a610ef6565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7581610f56565b8114610f8057600080fd5b50565b600081519050610f9281610f6c565b92915050565b6000819050919050565b610fab81610f98565b8114610fb657600080fd5b50565b600081519050610fc881610fa2565b92915050565b600081519050610fdd81610be8565b92915050565b600080600080600060a08688031215610fff57610ffe610a80565b5b600061100d88828901610f83565b955050602061101e88828901610fb9565b945050604061102f88828901610fce565b935050606061104088828901610fce565b925050608061105188828901610f83565b9150509295509295909350565b600061106982610f98565b915061107483610f98565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110b3576110b2610cbe565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110f0576110ef610cbe565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112d5761112c610cbe565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116a57611169610cbe565b5b82820290509291505056fea26469706673582212207ab1a1a009e3ed1a71f5dad702869165b92bc6da8027478640f165d094ad573964736f6c63430008080033",
  "devdoc": {
    "author": "Foo Bar",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {},
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 335,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)102"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)102": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}